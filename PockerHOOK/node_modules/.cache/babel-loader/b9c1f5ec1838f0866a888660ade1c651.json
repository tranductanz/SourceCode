{"ast":null,"code":"var _jsxFileName = \"/Users/trantanz/Desktop/PockerHOOK/src/pages/Game/index.jsx\";\nimport React, { Component, Fragment, useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport Controls from \"../../components/Control\";\nimport Main from \"../../components/Main\";\nimport axios from 'axios';\nimport { useDispatch } from \"react-redux\"; //! useEffect là thay thế cho lifeCycle\n\nconst Game = () => {\n  //test useEffect\n  const [count, setCount] = useState(0);\n  const [count2, setCount2] = useState(0); //! dispatch lên store\n\n  const dispatch = useDispatch(); //Didmount, didupdate, willUnmount\n  //mảng đằng sau là mảng depencence (phụ thuộc) là rỗng\n  //nếu giá trị trong depencence có thay đổi thì mới re-render lại\n  // ở đây là rỗng\n  // useEffect(() => {\n  //   console.log(\"use effect running\");\n  // }, [])\n\n  const fetchDeckCards = async () => {\n    try {\n      const res = await axios({\n        method: \"GET\",\n        url: \"https://deckofcardsapi.com/api/deck/new/\"\n      });\n      console.log(res); //lụm 1 bộ bài mới, lưu ID của nó trên localStorage\n      //nếu đã có bài, lụm lên xóc bài\n      //chưa có thì lụm bài mới\n\n      localStorage.setItem(\"deck_id\", res.data.deck_id);\n    } catch (err) {\n      console.log(err);\n    }\n  }; //! xóc bài\n  //! muốn xáo bộ bài nào, truyền id bộ đó vào đây\n\n\n  const reShuffleCard = async id => {\n    try {\n      const res = await axios({\n        method: \"GET\",\n        url: `https://deckofcardsapi.com/api/deck/${id}/shuffle/`\n      });\n      console.log(res);\n    } catch (err) {\n      console.log(err);\n    }\n  }; //! call api\n  // kiểm tra nếu đã có bộ bài rồi,sẽ không tạo mới nữa\n  //chỉ shuffle bộ bài hiện tại\n\n\n  useEffect(() => {\n    //call api\n    const deckId = localStorage.getItem(\"deck_id\");\n\n    if (deckId) {\n      reShuffleCard(deckId);\n    } else {\n      fetchDeckCards();\n    }\n  }, []); //! function Component không có lifeCycle\n  //! cần didMount để call api fetch Card\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setCount(count + 1);\n    },\n    className: \"btn btn-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Set count\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setCount2(count2 + 1);\n    },\n    className: \"btn btn-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Set count 2\"), /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Game;","map":{"version":3,"sources":["/Users/trantanz/Desktop/PockerHOOK/src/pages/Game/index.jsx"],"names":["React","Component","Fragment","useEffect","useState","Controls","Main","axios","useDispatch","Game","count","setCount","count2","setCount2","dispatch","fetchDeckCards","res","method","url","console","log","localStorage","setItem","data","deck_id","err","reShuffleCard","id","deckId","getItem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEjB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC,CAJiB,CAKjB;;AACA,QAAMU,QAAQ,GAAGN,WAAW,EAA5B,CANiB,CAOjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMO,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC;AACtBU,QAAAA,MAAM,EAAE,KADc;AAEtBC,QAAAA,GAAG,EAAE;AAFiB,OAAD,CAAvB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EALE,CAMF;AACA;AACA;;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCN,GAAG,CAACO,IAAJ,CAASC,OAAzC;AACD,KAVD,CAWA,OAAOC,GAAP,EAAY;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACD;AACF,GAfD,CAfiB,CAgCjB;AACA;;;AACA,QAAMC,aAAa,GAAG,MAAOC,EAAP,IAAc;AAClC,QAAI;AACF,YAAMX,GAAG,GAAG,MAAMT,KAAK,CAAC;AACtBU,QAAAA,MAAM,EAAE,KADc;AAEtBC,QAAAA,GAAG,EAAG,uCAAsCS,EAAG;AAFzB,OAAD,CAAvB;AAIAR,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD,KAND,CAOA,OAAOS,GAAP,EAAY;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACD;AACF,GAXD,CAlCiB,CA+CjB;AACA;AACA;;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMyB,MAAM,GAAGP,YAAY,CAACQ,OAAb,CAAqB,SAArB,CAAf;;AACA,QAAID,MAAJ,EAAY;AACVF,MAAAA,aAAa,CAACE,MAAD,CAAb;AACD,KAFD,MAGK;AACHb,MAAAA,cAAc;AACf;AACF,GATQ,EASN,EATM,CAAT,CAlDiB,CA8DjB;AACA;;AACA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEJ,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AAAqB,KAA9C;AAAgD,IAAA,SAAS,EAAC,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAKE;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEG,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AAAuB,KAAhD;AAAkD,IAAA,SAAS,EAAC,gBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,eAQE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CA7ED;;AA8EA,eAAeH,IAAf","sourcesContent":["import React, { Component, Fragment, useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\nimport Controls from \"../../components/Control\";\r\nimport Main from \"../../components/Main\";\r\nimport axios from 'axios';\r\nimport { useDispatch } from \"react-redux\";\r\n//! useEffect là thay thế cho lifeCycle\r\n\r\nconst Game = () => {\r\n\r\n  //test useEffect\r\n  const [count, setCount] = useState(0);\r\n  const [count2, setCount2] = useState(0);\r\n  //! dispatch lên store\r\n  const dispatch = useDispatch();\r\n  //Didmount, didupdate, willUnmount\r\n  //mảng đằng sau là mảng depencence (phụ thuộc) là rỗng\r\n  //nếu giá trị trong depencence có thay đổi thì mới re-render lại\r\n  // ở đây là rỗng\r\n  // useEffect(() => {\r\n  //   console.log(\"use effect running\");\r\n  // }, [])\r\n\r\n  const fetchDeckCards = async () => {\r\n    try {\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: \"https://deckofcardsapi.com/api/deck/new/\",\r\n      });\r\n      console.log(res);\r\n      //lụm 1 bộ bài mới, lưu ID của nó trên localStorage\r\n      //nếu đã có bài, lụm lên xóc bài\r\n      //chưa có thì lụm bài mới\r\n      localStorage.setItem(\"deck_id\", res.data.deck_id);\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  //! xóc bài\r\n  //! muốn xáo bộ bài nào, truyền id bộ đó vào đây\r\n  const reShuffleCard = async (id) => {\r\n    try {\r\n      const res = await axios({\r\n        method: \"GET\",\r\n        url: `https://deckofcardsapi.com/api/deck/${id}/shuffle/`,\r\n      });\r\n      console.log(res);\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  //! call api\r\n  // kiểm tra nếu đã có bộ bài rồi,sẽ không tạo mới nữa\r\n  //chỉ shuffle bộ bài hiện tại\r\n  useEffect(() => {\r\n    //call api\r\n    const deckId = localStorage.getItem(\"deck_id\");\r\n    if (deckId) {\r\n      reShuffleCard(deckId);\r\n    }\r\n    else {\r\n      fetchDeckCards();\r\n    }\r\n  }, []);\r\n\r\n\r\n  //! function Component không có lifeCycle\r\n  //! cần didMount để call api fetch Card\r\n  return (\r\n    <Fragment>\r\n      {/* //todo khi nhấn nút sẽ biến count lên 1 */}\r\n      <button onClick={() => { setCount(count + 1) }} className=\"btn btn-danger\">\r\n        Set count\r\n      </button>\r\n      <button onClick={() => { setCount2(count2 + 1) }} className=\"btn btn-danger\">\r\n        Set count 2\r\n      </button>\r\n      <Controls />\r\n      <Main />\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Game;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}