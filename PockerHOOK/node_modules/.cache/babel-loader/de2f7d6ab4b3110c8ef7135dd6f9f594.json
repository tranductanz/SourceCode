{"ast":null,"code":"var _jsxFileName = \"/Users/trantanz/Desktop/PockerHOOK/src/pages/Home/index.jsx\";\nimport React, { useState, Fragment } from \"react\";\nimport Game from \"../Game\"; //! check Validate\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup'; //! HOOK dispatch\n\nimport { useDispatch } from \"react-redux\"; //shape là hình dáng cái form như nào\n//yup.object : value của cái form bắt buộc phải là object\n\nconst schema = yup.object().shape({\n  //kiểu dữ liệu\n  //username phải là chuỗi\n  username: yup.string().required(\"** Username is Required ! \"),\n  email: yup.string().required(\"** Email is Required ! \").email(\"** Email is invalid, please try again\"),\n  // nhập 1 hoặc nhiều số ($) bắt buộc,\n  phone: yup.string().required(\"** Phone is Required !\").matches(/^[0-9]+$/g, \"Phone must be number !\")\n}); //! DEBOUNCE\n\nlet timer = null;\n\nconst Home = () => {\n  //! useState : tạo state\n  // phần tử 1 : là 1 cái state\n  // phần tử 2 : là 1 cái hàm\n  //! useState : param 1 : là giá trị ban đầu của state\n  const [isGameStarted, setIsGameStarted] = useState(false);\n  const dispatch = useDispatch(); // const [a, setA] = useState(\"\");\n  // const [b, setB] = useState(0);\n  //! kiểu cũ\n  // const [formValue, setFormValue] = useState({\n  //   username: \"\",\n  //   email: \"\",\n  //   phone: \"\",\n  // })\n  //! xử lý form\n  //todo values là data của form\n  // const { handleChange, values } = useFormik({\n  //   initialValues: {\n  //     username: \"\",\n  //     email: \"\",\n  //     phone: \"\",\n  //   }\n  // })\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      email: \"\",\n      phone: \"\"\n    },\n    //! check lỗi\n    validationSchema: schema,\n    //! đưa chuột vô mới check !!\n    validateOnMount: true\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault(); //! Để cho khi submit đánh tất cả hiện lỗi lên luôn\n\n    formik.setTouched({\n      username: true,\n      email: true,\n      phone: true\n    }); //! nếu mà toàn bộ cái form là true\n    //! chỉ cần 1 cái false, thì form là false\n\n    if (!formik.isValid) {\n      return;\n    } //! có sẵn, xem user có đụng vào không\n    // console.log(formik.touched);\n    // setIsGameStarted(true);\n    //! dispatch action lên store, lưu info vào playerList\n\n\n    dispatch({\n      type: \"ADD_PLAYER\",\n      payload: { ...formik.values,\n        totalPoint: 25000,\n        cards: []\n      }\n    });\n    setIsGameStarted(true); // console.log(formik.values);\n    // console.log(formik.errors);\n  };\n\n  const handleSetDefaultPlayer = () => {\n    const defaultPlayer = {\n      username: \"tranductan1\",\n      email: \"tantran1610@gmail.com\",\n      phone: \"099999999\"\n    }; //! value đang nằm ở formik\n\n    formik.setValues({\n      username: defaultPlayer.username,\n      email: defaultPlayer.email,\n      phone: defaultPlayer.phone\n    });\n  }; //todo HÀM DEBOUNCE\n\n\n  const handleChangeTest = () => {\n    setTimeout(() => {});\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, isGameStarted ? /*#__PURE__*/React.createElement(Game, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    style: {\n      width: \"100vw\",\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"diplay-4 mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \" Welcome to Pocker Center\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, \"Fill your info and start\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"w-25 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    //state muốn cập nhật\n    name: \"username\" //! cho formik.touched biết user đã chạm vào đâu\n    //todo hàm xây dựng sẵn\n    ,\n    value: formik.values.username,\n    onBlur: formik.handleBlur,\n    onChange: formik.handleChange,\n    type: \"input\",\n    placeholder: \"username\",\n    className: \"w-100 form-control mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), formik.touched.username && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 41\n    }\n  }, formik.errors.username), /*#__PURE__*/React.createElement(\"input\", {\n    //! cho formik.touched biết user đã chạm vào đâu\n    //todo hàm xây dựng sẵn\n    value: formik.values.email,\n    onBlur: formik.handleBlur,\n    name: \"email\",\n    onChange: formik.handleChange,\n    type: \"input\",\n    placeholder: \"email\",\n    className: \"w-100 form-control mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }), formik.touched.email && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 38\n    }\n  }, formik.errors.email), /*#__PURE__*/React.createElement(\"input\", {\n    //! cho formik.touched biết user đã chạm vào đâu\n    //todo hàm xây dựng sẵn\n    value: formik.values.phone,\n    onBlur: formik.handleBlur,\n    name: \"phone\",\n    onChange: formik.handleChange,\n    type: \"input\",\n    placeholder: \"phone\",\n    className: \"w-100 form-control mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }), formik.touched.phone && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 38\n    }\n  }, formik.errors.phone), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, \"Start new Game\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSetDefaultPlayer,\n    type: \"button\",\n    className: \"btn btn-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"Set Default Player\"))));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/trantanz/Desktop/PockerHOOK/src/pages/Home/index.jsx"],"names":["React","useState","Fragment","Game","useFormik","yup","useDispatch","schema","object","shape","username","string","required","email","phone","matches","timer","Home","isGameStarted","setIsGameStarted","dispatch","formik","initialValues","validationSchema","validateOnMount","handleSubmit","event","preventDefault","setTouched","isValid","type","payload","values","totalPoint","cards","handleSetDefaultPlayer","defaultPlayer","setValues","handleChangeTest","setTimeout","width","height","display","flexDirection","alignItems","justifyContent","handleBlur","handleChange","touched","errors"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\r\nimport Game from \"../Game\";\r\n//! check Validate\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\n//! HOOK dispatch\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n//shape là hình dáng cái form như nào\r\n//yup.object : value của cái form bắt buộc phải là object\r\nconst schema = yup.object().shape({\r\n  //kiểu dữ liệu\r\n  //username phải là chuỗi\r\n  username: yup.string().required(\"** Username is Required ! \"),\r\n  email: yup.string().required(\"** Email is Required ! \").email(\"** Email is invalid, please try again\"),\r\n  // nhập 1 hoặc nhiều số ($) bắt buộc,\r\n  phone: yup\r\n    .string()\r\n    .required(\"** Phone is Required !\")\r\n    .matches(/^[0-9]+$/g, \"Phone must be number !\")\r\n})\r\n\r\n\r\n//! DEBOUNCE\r\nlet timer = null;\r\n\r\n\r\nconst Home = () => {\r\n  //! useState : tạo state\r\n  // phần tử 1 : là 1 cái state\r\n  // phần tử 2 : là 1 cái hàm\r\n  //! useState : param 1 : là giá trị ban đầu của state\r\n  const [isGameStarted, setIsGameStarted] = useState(false)\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // const [a, setA] = useState(\"\");\r\n  // const [b, setB] = useState(0);\r\n  //! kiểu cũ\r\n  // const [formValue, setFormValue] = useState({\r\n  //   username: \"\",\r\n  //   email: \"\",\r\n  //   phone: \"\",\r\n  // })\r\n  //! xử lý form\r\n  //todo values là data của form\r\n  // const { handleChange, values } = useFormik({\r\n  //   initialValues: {\r\n  //     username: \"\",\r\n  //     email: \"\",\r\n  //     phone: \"\",\r\n  //   }\r\n  // })\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n    },\r\n    //! check lỗi\r\n    validationSchema: schema,\r\n    //! đưa chuột vô mới check !!\r\n    validateOnMount: true,\r\n  })\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    //! Để cho khi submit đánh tất cả hiện lỗi lên luôn\r\n    formik.setTouched({\r\n      username: true,\r\n      email: true,\r\n      phone: true,\r\n    })\r\n\r\n    //! nếu mà toàn bộ cái form là true\r\n    //! chỉ cần 1 cái false, thì form là false\r\n    if (!formik.isValid) {\r\n      return;\r\n    }\r\n\r\n\r\n    //! có sẵn, xem user có đụng vào không\r\n    // console.log(formik.touched);\r\n    // setIsGameStarted(true);\r\n\r\n    //! dispatch action lên store, lưu info vào playerList\r\n\r\n    dispatch({\r\n      type: \"ADD_PLAYER\",\r\n      payload: {\r\n        ...formik.values,\r\n        totalPoint: 25000,\r\n        cards: [],\r\n      },\r\n    });\r\n    setIsGameStarted(true);\r\n\r\n    // console.log(formik.values);\r\n    // console.log(formik.errors);\r\n  };\r\n\r\n  const handleSetDefaultPlayer = () => {\r\n    const defaultPlayer = {\r\n      username: \"tranductan1\",\r\n      email: \"tantran1610@gmail.com\",\r\n      phone: \"099999999\",\r\n    }\r\n    //! value đang nằm ở formik\r\n    formik.setValues({\r\n      username: defaultPlayer.username,\r\n      email: defaultPlayer.email,\r\n      phone: defaultPlayer.phone,\r\n    });\r\n  }\r\n\r\n  //todo HÀM DEBOUNCE\r\n\r\n\r\n\r\n  const handleChangeTest = () => {\r\n    setTimeout(()=>{\r\n      \r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      {isGameStarted ? <Game /> : (\r\n        <div\r\n          className=\"text-center\"\r\n          style={{\r\n            width: \"100vw\",\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <h1 className=\"diplay-4 mb-5\"> Welcome to Pocker Center</h1>\r\n          <h3>Fill your info and start</h3>\r\n          <form\r\n            onSubmit={handleSubmit}\r\n            className=\"w-25 mx-auto\">\r\n            <input\r\n              //state muốn cập nhật\r\n              name=\"username\"\r\n              //! cho formik.touched biết user đã chạm vào đâu\r\n              //todo hàm xây dựng sẵn\r\n              value={formik.values.username}\r\n              onBlur={formik.handleBlur}\r\n              onChange={formik.handleChange}\r\n              type=\"input\"\r\n              placeholder=\"username\"\r\n              className=\"w-100 form-control mb-3\"\r\n            />\r\n            {/* //! check validate */}\r\n            {formik.touched.username && <p className=\"text-danger\">{formik.errors.username}</p>}\r\n            <input\r\n              //! cho formik.touched biết user đã chạm vào đâu\r\n              //todo hàm xây dựng sẵn\r\n              value={formik.values.email}\r\n              onBlur={formik.handleBlur}\r\n              name=\"email\"\r\n              onChange={formik.handleChange}\r\n              type=\"input\"\r\n              placeholder=\"email\"\r\n              className=\"w-100 form-control mb-3\"\r\n            />\r\n            {/* //! check validate */}\r\n            {formik.touched.email && <p className=\"text-danger\">{formik.errors.email}</p>}\r\n            <input\r\n              //! cho formik.touched biết user đã chạm vào đâu\r\n              //todo hàm xây dựng sẵn\r\n              value={formik.values.phone}\r\n              onBlur={formik.handleBlur}\r\n              name=\"phone\"\r\n              onChange={formik.handleChange}\r\n              type=\"input\"\r\n              placeholder=\"phone\"\r\n              className=\"w-100 form-control mb-3\"\r\n            />\r\n            {/* //! check validate */}\r\n            {formik.touched.phone && <p className=\"text-danger\">{formik.errors.phone}</p>}\r\n            <button\r\n              className=\"btn btn-success\">Start new Game</button>\r\n            <button\r\n              onClick={handleSetDefaultPlayer}\r\n              type=\"button\"\r\n              className=\"btn btn-info\">Set Default Player</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}